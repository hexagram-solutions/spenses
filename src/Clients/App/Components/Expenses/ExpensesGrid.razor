@using Spenses.Shared.Models.Expenses
@using MudBlazor.Extensions
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudDataGrid @ref="DataGridRef"
             T="ExpenseDigest"
             FixedHeader
             Virtualize
             SortMode="SortMode.Single"
             ServerData="GetServerData"
             Height="calc(100vh - 15rem);"
             GroupExpanded
             Dense
             FixedFooter>
    <ToolBarContent>
        <MudStack Row
                  AlignItems="AlignItems.Center"
                  Class="ml-n3">
            <div>
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Rounded.Add"
                           OnClick="CreateExpense">
                    Create expense
                </MudButton>
            </div>

            <MudSelect T="Guid"
                       Label="Categories"
                       Variant="Variant.Outlined"
                       SelectedValues="Query.Categories"
                       SelectedValuesChanged="OnCategoryFilter"
                       AnchorOrigin="Origin.BottomCenter"
                       MultiSelection
                       Margin="Margin.Dense"
                       Disabled="ExpensesState.Value.ExpenseFiltersRequesting">
                @foreach (var category in ExpensesState.Value.ExpenseFilters.Categories)
                {
                    <MudSelectItem T="Guid"
                                   Value="@category.Id">
                        @category.Name
                    </MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="string"
                       Label="Tags"
                       Variant="Variant.Outlined"
                       SelectedValues="Query.Tags"
                       SelectedValuesChanged="OnTagFilter"
                       MultiSelection
                       Margin="Margin.Dense"
                       AnchorOrigin="Origin.BottomCenter"
                       Disabled="ExpensesState.Value.ExpenseFiltersRequesting">
                @foreach (var tag in ExpensesState.Value.ExpenseFilters.Tags)
                {
                    <MudSelectItem T="string"
                                   Value="@tag">
                        @tag
                    </MudSelectItem>
                }
            </MudSelect>

            <DateRangeFilterPicker Label="Period"
                                   DateRange="Period"
                                   DateRangeChanged="OnPeriodFilterChanged" />
        </MudStack>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Date"
                        T="ExpenseDigest"
                        TProperty="DateOnly"
                        Title="Date"
                        Format="yyyy-MM-dd"
                        Groupable="true"
                        GroupBy="GroupByDate"
                        FooterClassFunc="FooterClassFunc">
            <GroupTemplate>
                <span style="font-weight:bold">@($"{context.Grouping.Key:yyyy-MM}")</span>
            </GroupTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Amount"
                        Title="Amount"
                        Filterable="true"
                        AggregateDefinition="_amountAggregation"
                        FooterClass="border-t-2 mud-border-primary mt-n2"
                        FooterStyle="font-family: monospace;">
            <CellTemplate>
                <samp>@($"{context.Item.Amount:C}")</samp>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.PaidByMemberName"
                        Title="Paid by"
                        Groupable="true"/>
        <PropertyColumn Property="x => x.Note"
                        Title="Note"
                        Sortable="false">
            <CellTemplate>
                <div style="width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    @context.Item.Note
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.CategoryName"
                        Title="Category"
                        Groupable="true"/>
        <TemplateColumn Title="Tags"
                        Sortable="false">
            <CellTemplate>
                @if (context.Item.Tags is null)
                {
                    <div class="mud-text-secondary pl-2">
                        <em>No tags</em>
                    </div>
                }
                @foreach (var tag in context.Item.Tags?.Split(' ').OrderBy(x => x) ?? Enumerable.Empty<string>())
                {
                    <MudChip Size="Size.Small"
                             Variant="Variant.Text">
                        @tag
                    </MudChip>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Actions"
                        Sortable="false">
            <CellTemplate>
                <MudTooltip Text="Edit">
                    <MudIconButton Size="Size.Small"
                                   Color="Color.Tertiary"
                                   Icon="@Icons.Material.Rounded.Edit"
                                   OnClick="@(args => OnEditClicked(args, context.Item.Id))"/>
                </MudTooltip>
                <MudTooltip Text="Delete">
                    <MudIconButton Size="Size.Small"
                                   Color="Color.Error"
                                   Icon="@Icons.Material.Rounded.Delete"
                                   OnClick="@(args => OnDeleteClicked(args, context.Item))"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    AggregateDefinition<ExpenseDigest> _amountAggregation = new()
    {
        Type = AggregateType.Custom,
        CustomAggregate = items =>
        {
            return items.Sum(e => e.Amount).ToString("C");
        }
    };

    private string FooterClassFunc(ExpenseDigest arg)
    {
        return "border-double border-t-2 mud-border-primary";
    }

}

@using SortDirection = Spenses.Shared.Models.Common.SortDirection;
@using Spenses.App.Store.Expenses
@using Spenses.Client.Http
@using Spenses.Shared.Models.Expenses
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudDataGrid @ref="DataGridRef"
             T="ExpenseDigest"
             FixedHeader
             Virtualize
             SortMode="SortMode.Single"
             ServerData="GetServerData"
             Height="calc(100vh - 16rem);"
             CurrentPage="0"
             RowsPerPage="200">
    <ToolBarContent>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Rounded.Add"
                   OnClick="CreateExpense">
            Create expense
        </MudButton>
        <MudSelect T="Guid"
                   Label="Categories"
                   SelectedValues="Query.Categories"
                   SelectedValuesChanged="OnCategoryFilter"
                   MultiSelection
                   Disabled="ExpensesState.Value.ExpenseFiltersRequesting">
            @foreach (var category in ExpensesState.Value.ExpenseFilters.Categories)
            {
                <MudSelectItem T="Guid"
                               Value="@category.Id">
                    @category.Name
                </MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string"
                   Label="Tags"
                   SelectedValues="Query.Tags"
                   SelectedValuesChanged="OnTagFilter"
                   MultiSelection
                   Disabled="ExpensesState.Value.ExpenseFiltersRequesting">
            @foreach (var tag in ExpensesState.Value.ExpenseFilters.Tags)
            {
                <MudSelectItem T="string"
                               Value="@tag">
                    @tag
                </MudSelectItem>
            }
        </MudSelect>
        <MudDateRangePicker Label="Dates"
                            DateRange="DateRangeValue"
                            DateRangeChanged="OnDateFilterChanged"
                            DateFormat="yyyy-MM-dd" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Date"
                        Title="Date"
                        Format="yyyy-MM-dd"/>
        <PropertyColumn Property="x => x.Amount"
                        Title="Amount">
            <CellTemplate>
                <samp>@($"{context.Item.Amount:C}")</samp>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.PaidByMemberName"
                        Title="Paid by"/>
        <PropertyColumn Property="x => x.CategoryName"
                        Title="Category"/>
        <TemplateColumn Title="Tags"
                        Sortable="false">
            <CellTemplate>
                @foreach (var tag in context.Item.Tags?.Split(' ').OrderBy(x => x) ?? Enumerable.Empty<string>())
                {
                    <MudChip Size="Size.Small"
                             Variant="Variant.Text">
                        @tag
                    </MudChip>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Actions"
                        Sortable="false">
            <CellTemplate>
                <MudTooltip Text="Edit">
                    <MudIconButton Size="Size.Small"
                                   Color="Color.Tertiary"
                                   Icon="@Icons.Material.Rounded.Edit"
                                   OnClick="@(args => OnEditClicked(args, context.Item.Id))"/>
                </MudTooltip>
                <MudTooltip Text="Delete">
                    <MudIconButton Size="Size.Small"
                                   Color="Color.Error"
                                   Icon="@Icons.Material.Rounded.Delete"
                                   OnClick="@(args => OnDeleteClicked(args, context.Item))"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    [Parameter] public Guid HomeId { get; init; }

    [Inject] private IState<ExpensesState> ExpensesState { get; init; } = null!;

    [Inject] private IDispatcher Dispatcher { get; init; } = null!;

    [Inject] private IDialogService DialogService { get; init; } = null!;

    [Inject] private IExpensesApi ExpensesApi { get; init; } = null!;

    private IEnumerable<ExpenseDigest> Expenses => ExpensesState.Value.Expenses.Items;

    private MudDataGrid<ExpenseDigest> DataGridRef { get; set; } = new();

    private IDialogReference? CreateDialog { get; set; }

    private IDialogReference? EditDialog { get; set; }

    private Dictionary<string, SortDefinition<ExpenseDigest>> SortDefinitions { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SubscribeToAction<ExpenseCreationSucceededAction>(_ => CreateDialog?.Close());
        SubscribeToAction<ExpenseUpdateSucceededAction>(_ => EditDialog?.Close());

        Dispatcher.Dispatch(new ExpenseFiltersRequestedAction(HomeId));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
            await DataGridRef.SetSortAsync(nameof(ExpenseDigest.Date), MudBlazor.SortDirection.Descending, x => x.Date);
    }

    private Task OnAddExpenseClicked()
    {
        // return ModalService.Show<CreateExpenseModal>();
        return Task.CompletedTask;
    }

    private Task OnEditClicked(MouseEventArgs _, Guid expenseId)
    {
        // return ModalService.Show<EditExpenseModal>(p => { p.Add(x => x.ExpenseId, expenseId); });
        return Task.CompletedTask;
    }

    private async Task OnDeleteClicked(MouseEventArgs _, ExpenseDigest expense)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Are you sure you want to delete this expense?",
            $"{expense.Amount} paid by {expense.PaidByMemberName} on {expense.Date:O}",
            "Delete expense",
            cancelText: "Cancel");

        if (confirmed != true)
            return;

        Dispatcher.Dispatch(new ExpenseDeletedAction(HomeId, expense.Id));
    }

    private FilteredExpensesQuery Query { get; set; } = new()
    {
        OrderBy = nameof(ExpenseDigest.Date),
        SortDirection = SortDirection.Desc
    };

    private Task OnCategoryFilter(IEnumerable<Guid> categoryIds)
    {
        Query.Categories = categoryIds;

        return DataGridRef.ReloadServerData();
    }

    private Task OnTagFilter(IEnumerable<string> tags)
    {
        Query.Tags = tags;

        return DataGridRef.ReloadServerData();
    }

    private DateRange? DateRangeValue
    {
        get
        {
            if (!Query.MinDate.HasValue && !Query.MaxDate.HasValue)
                return null;

            var today = DateOnly.FromDateTime(DateTime.Today);

            return new DateRange(
                new DateTime(Query.MinDate.GetValueOrDefault(today), TimeOnly.MinValue),
                new DateTime(Query.MaxDate.GetValueOrDefault(today), TimeOnly.MinValue));
        }
    }

    private Task OnDateFilterChanged(DateRange? range)
    {
        if (range is null)
        {
            Query.MinDate = null;
            Query.MaxDate = null;

            return Task.CompletedTask;
        }

        Query.MinDate = range.Start.HasValue ? DateOnly.FromDateTime(range.Start.GetValueOrDefault()) : null;
        Query.MaxDate = range.End.HasValue ? DateOnly.FromDateTime(range.End.GetValueOrDefault()) : null;

        return DataGridRef.ReloadServerData();
    }

    private async Task<GridData<ExpenseDigest>> GetServerData(GridState<ExpenseDigest> state)
    {
        Query.Skip = state.PageSize * state.Page;
        Query.Take = state.PageSize;

        var sortDefinition = state.SortDefinitions.SingleOrDefault();

        if (sortDefinition is not null)
        {
            Query.SortDirection = sortDefinition.Descending ? SortDirection.Desc : SortDirection.Asc;
            Query.OrderBy = sortDefinition.SortBy;
        }

        var response = await ExpensesApi.GetExpenses(HomeId, Query);

        return new GridData<ExpenseDigest>
        {
            Items = response.Content!.Items,
            TotalItems = response.Content.TotalCount
        };
    }

    private Task CreateExpense()
    {
        return Task.CompletedTask;
    }

}

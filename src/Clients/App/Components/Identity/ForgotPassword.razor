@page "/forgot-password"
@using Spenses.App.Store.Identity
@using Fluxor
@using Spenses.App.Infrastructure
@using Spenses.Shared.Models.Identity
@using Spenses.Shared.Validators.Identity
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Reset password</PageTitle>

<MudStack>
    <MudText Typo="Typo.h5">Reset your password</MudText>
    <MudText Typo="Typo.subtitle1">Enter the email address associated with your account to reset your password.</MudText>

    <MudForm Model="Request"
             @ref="FormRef"
             Validation="@(_validator.ValidateValue())">
             
        <MudTextField @bind-Value="Request.Email"
                      Label="Email"
                      For="@(() => Request.Email)"
                      Required/>
    </MudForm>

    @if (Success == true)
    {
        <MudAlert Severity="Severity.Success">
            If an account exists with your email address, <b>@Request.Email</b>, we just emailed you with instructions to reset your password.
        </MudAlert>
    }
    else if (Success == false)
    {
        <MudAlert Severity="Severity.Error">
            An unknown error occurred when sending password reset instructions to <b>@Request.Email</b>.
        </MudAlert>
    }

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               OnClick="RequestPasswordReset"
               Disabled="IdentityState.Value.ForgotPasswordRequesting">
        @if (Success is null)
        {
            <span>Continue</span>
        }
        else
        {
            <span>Resend email</span>
        }
    </MudButton>
</MudStack>

@code {

    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;

    [Inject]
    private IState<IdentityState> IdentityState { get; set; } = null!;

    private ForgotPasswordRequest Request { get; set; } = new();

    private bool? Success { get; set; }

    private MudForm FormRef { get; set; } = null!;

    private readonly ForgotPasswordRequestValidator _validator = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SubscribeToAction<ForgotPasswordSucceededAction>(_ => Success = true);
        SubscribeToAction<ForgotPasswordFailedAction>(_ => Success = false);
    }

    private async Task RequestPasswordReset()
    {
        Success = null;

        await FormRef.Validate();

        if (!FormRef.IsValid)
            return;

        Dispatcher.Dispatch(new ForgotPasswordRequestedAction(Request.Email));
    }
}

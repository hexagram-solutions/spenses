@page "/login"
@using Spenses.App.Infrastructure
@using Spenses.Shared.Models.Identity
@using Spenses.Shared.Validators.Identity
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Log in</PageTitle>

<h2>Log in</h2>

<FluentStack Orientation="Orientation.Vertical">
    @foreach (var error in IdentityState.Value.Errors)
    {
        switch (error)
        {
            case IdentityErrors.Login.InvalidCredentials:
                @InvalidCredentialsError
                break;

            case IdentityErrors.Login.EmailVerificationRequired:
                @EmailVerificationRequiredError
                break;

            case IdentityErrors.Login.LockedOut:
                @LockedOutError
                break;

            default:
                @GenericLoginError(IdentityState.Value.Errors)
                break;
        }
    }

    <EditForm Model="LoginRequest"
              OnSubmit="LogIn">
        <Validate ValidationProperties="@(ValidationProperties.Set.FluentValidator<LoginRequestValidator>())"/>

        <FluentTextField Id="email"
                         TextFieldType="TextFieldType.Email"
                         @bind-Value="LoginRequest.Email"
                         AutoComplete="email"
                         Required
                         Label="Email"
                         Style="width: 100%"/>
        <ValidationMessage For="@(() => LoginRequest.Email)"/>

        <FluentTextField Id="password"
                         TextFieldType="TextFieldType.Password"
                         @bind-Value="LoginRequest.Password"
                         AutoComplete="current-password"
                         Required
                         Label="Password"
                         Style="width: 100%"/>
        <ValidationMessage For="@(() => LoginRequest.Password)"/>

        <FluentButton Type="ButtonType.Submit"
                      Appearance="Appearance.Accent"
                      Style="width: 100%"
                      Loading="IdentityState.Value.LoginRequesting">
            Log in
        </FluentButton>
    </EditForm>

    <div>
        <p>
            <FluentAnchor Appearance="Appearance.Hypertext"
                          Href="@Routes.Identity.ForgotPassword">
                Forgot password?
            </FluentAnchor>
        </p>
        <p>
            Don't have an account?
            <FluentAnchor Appearance="Appearance.Hypertext"
                          Href="@Routes.Identity.SignUp(ReturnUrl)">
                Sign up
            </FluentAnchor>
        </p>
    </div>
</FluentStack>

@code
{
    private RenderFragment InvalidCredentialsError => __builder =>
    {
        <FluentMessageBar Title="Your email or password was incorrect. Please try again."
                          Intent="MessageIntent.Error"/>
    };

    private RenderFragment EmailVerificationRequiredError => __builder =>
    {
        <FluentMessageBar Title="You need to verify your email address before you can log in."
                          Intent="MessageIntent.Error">
            You can request a new verification email <FluentAnchor Href="@Routes.Identity.EmailVerificationRequired">here.</FluentAnchor>
        </FluentMessageBar>
    };

    private RenderFragment LockedOutError => __builder =>
    {
        <FluentMessageBar Title="This account is locked and cannot log in."
                          Intent="MessageIntent.Error"/>
    };

    private RenderFragment GenericLoginError(string[] errors) => __builder =>
    {
        <FluentMessageBar Title="Unable to log in"
                          Intent="MessageIntent.Error">
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </FluentMessageBar>
    };
}

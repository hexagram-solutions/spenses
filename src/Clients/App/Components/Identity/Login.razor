@page "/login"
@using Spenses.Shared.Validators.Identity
@using Spenses.App.Infrastructure

<PageTitle>Log in</PageTitle>

<h2>Log in</h2>

<FluentStack Orientation="Orientation.Vertical">

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <FluentMessageBar Title="@ErrorMessage"
                          Intent="MessageIntent.Error"/>
    }

    <EditForm Model="LoginRequest"
              OnSubmit="LogIn">
        <Validate ValidationProperties="@(ValidationProperties.Set.FluentValidator<LoginRequestValidator>())"/>

        <FluentTextField Id="email"
                         TextFieldType="TextFieldType.Email"
                         @bind-Value="LoginRequest.Email"
                         AutoComplete="email"
                         Required
                         Label="Email"
                         Style="width: 100%"/>
        <ValidationMessage For="@(() => LoginRequest.Email)"/>

        <FluentTextField Id="password"
                         TextFieldType="TextFieldType.Password"
                          @bind-Value="LoginRequest.Password"
                          AutoComplete="current-password"
                         Required
                         Label="Password"
                         Style="width: 100%"/>
        <ValidationMessage For="@(() => LoginRequest.Password)"/>

        <FluentButton Type="ButtonType.Submit"
                      Appearance="Appearance.Accent"
                      Style="width: 100%">
            Log in
        </FluentButton>
    </EditForm>

    <div>
        <p>
            <FluentAnchor Appearance="Appearance.Hypertext"
                          Href="@Routes.Identity.ForgotPassword">
                Forgot password?
            </FluentAnchor>
        </p>
        <p>
            Don't have an account?
            <FluentAnchor Appearance="Appearance.Hypertext"
                          Href="@Routes.Identity.SignUp(ReturnUrl)">
                Sign up
            </FluentAnchor>
        </p>
    </div>
</FluentStack>

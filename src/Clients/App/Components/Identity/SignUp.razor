@page "/sign-up"
@using Spenses.Shared.Models.Identity
@using Spenses.Shared.Validators.Identity
@using Spenses.App.Infrastructure
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Sign up</PageTitle>

<h2>Sign up</h2>

<FluentStack Orientation="Orientation.Vertical">

    @foreach (var error in IdentityState.Value.Errors)
    {
        switch (error)
        {
            case IdentityErrors.Register.InvalidEmail:
            case IdentityErrors.Register.InvalidUserName:
                @InvalidUserNameOrEmailError
                break;

            case IdentityErrors.Register.DuplicateEmail:
            case IdentityErrors.Register.DuplicateUserName:
                @DuplicateUserNameOrEmailError
                break;

            case IdentityErrors.Register.PasswordTooShort:
                @PasswordTooShortError
                break;

            case IdentityErrors.Register.PwnedPassword:
                @_pwnedPasswordError
                break;

            case IdentityErrors.Register.UserNameAsPassword:
            case IdentityErrors.Register.EmailAsPassword:
                @UserNameOrEmailAsPasswordError
                break;

            default:
                @GenericSignUpError(IdentityState.Value.Errors)
                break;
        }
    }

    <EditForm Model="RegisterRequest"
              OnSubmit="RegisterUser">

        <Validate ValidationProperties="@(ValidationProperties.Set.FluentValidator<RegisterRequestValidator>())"/>

        <FluentTextField Name="RegisterRequest.Name"
                         @bind-Value="RegisterRequest.Name"
                         Required="true"
                         Placeholder="Hingle McCringleberry"
                         Label="Your name"
                         Style="width: 100%"/>
        <ValidationMessage For="() => RegisterRequest.Name"
                           class="text-danger"/>

        <FluentTextField Name="RegisterRequest.Email"
                         @bind-Value="RegisterRequest.Email"
                         AutoComplete="username"
                         Required="true"
                         Placeholder="hmccringleberry@psu.edu"
                         Label="Email"
                         Style="width: 100%"/>
        <ValidationMessage For="() => RegisterRequest.Email"
                           class="text-danger"/>

        <FluentTextField Name="RegisterRequest.Password"
                         TextFieldType="TextFieldType.Password"
                         @bind-Value="RegisterRequest.Password"
                         AutoComplete="current-password"
                         Required
                         Label="Password"
                         Style="width: 100%"/>
        <ValidationMessage For="() => RegisterRequest.Password"
                           class="text-danger"/>

        <FluentButton Type="ButtonType.Submit"
                      Appearance="Appearance.Accent"
                      Style="width: 100%"
                      Loading="IdentityState.Value.RegistrationRequesting">
            Sign up
        </FluentButton>
    </EditForm>
</FluentStack>

@code
{
    private RenderFragment InvalidUserNameOrEmailError => __builder =>
    {
        <FluentMessageBar Title="The email address you entered is invalid."
                          Intent="MessageIntent.Error" />
    };

    private RenderFragment DuplicateUserNameOrEmailError => __builder =>
    {
        <FluentMessageBar Title="It looks like you may already have an account with us."
                          Intent="MessageIntent.Error">
            Use your credentials to <FluentAnchor Href="@Routes.Identity.Login()">login</FluentAnchor> instead.
        </FluentMessageBar>
    };

    private RenderFragment PasswordTooShortError => __builder =>
    {
        <FluentMessageBar Title="Passwords must have a minimum of 10 characters."
                          Intent="MessageIntent.Error" />
    };

    private RenderFragment UserNameOrEmailAsPasswordError => __builder =>
    {
        <FluentMessageBar Title="You cannot use your email address as your password."
                          Intent="MessageIntent.Error" />
    };

    private readonly RenderFragment _pwnedPasswordError = __builder =>
    {
        <FluentMessageBar Title="Your password is insecure."
                          Intent="MessageIntent.Error">
            <p>
                The password you've entered appears multiple times in historical data breaches and is therefore known to be insecure. Please enter a different password.
            </p>
            <p>
                For more information, click <FluentAnchor Href="https://haveibeenpwned.com/Passwords">here.</FluentAnchor>
            </p>
        </FluentMessageBar>
    };

    private RenderFragment GenericSignUpError(string[] errors) => __builder =>
    {
        <FluentMessageBar Title="Unable to sign up"
                          Intent="MessageIntent.Error">
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </FluentMessageBar>
    };
}

@using Spenses.Shared.Validators.Me
@using Spenses.Shared.Models.Identity
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudStack AlignItems="AlignItems.Start">
    <MudStack Row
              AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">
            Change password
        </MudText>
        <MudTooltip Text="@(IsEditing ? "Change password" : "Cancel")">
            <MudIconButton Variant="Variant.Outlined"
                           Color="@(IsEditing ? Color.Warning : Color.Tertiary)"
                           OnClick="@(() => IsEditing = !IsEditing)"
                           Icon="@(IsEditing ? Icons.Material.Rounded.EditOff : Icons.Material.Rounded.Edit)">
            </MudIconButton>
        </MudTooltip>
    </MudStack>
    <MudText>
        Enter your current password first, then choose a password that is at least 8 characters. For extra
        security, consider including a combination of numbers, upper and lowercase letters.
    </MudText>

    @if (IsEditing)
    {
        <EditForm Model="Request"
                  OnValidSubmit="SubmitChangePassword">
            <FluentValidationValidator />

            <MudStack>
                <MudTextField @bind-Value="Request.CurrentPassword"
                              Label="Current password"
                              Variant="Variant.Text"
                              InputType="InputType.Password"
                              For="@(() => Request.CurrentPassword)"
                              Style="width: 500px"
                              Required/>

                <MudTextField @bind-Value="Request.NewPassword"
                              Label="New password"
                              Variant="Variant.Text"
                              InputType="InputType.Password"
                              Style="width: 500px"
                              For="@(() => Request.NewPassword)"
                              Required/>

                <div>
                    <LoadingButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Loading="MeState.Value.ChangePasswordRequesting">
                        Change password
                    </LoadingButton>
                </div>

            </MudStack>
        </EditForm>

        @switch (Succeeded)
        {
            case true:
                <MudAlert Severity="Severity.Success">
                    Your password was successfully changed.
                </MudAlert>
                break;
            case false:
            {
                foreach (var error in MeState.Value.ChangePasswordErrors)
                {
                    switch (error)
                    {
                        case IdentityErrors.Password.PasswordMismatch:
                            @PasswordMismatchError
                            break;
                        case IdentityErrors.Password.PasswordTooShort:
                            @PasswordTooShortError
                            break;

                        case IdentityErrors.Password.PwnedPassword:
                            @_pwnedPasswordError
                            break;

                        case IdentityErrors.Password.UserNameAsPassword:
                        case IdentityErrors.Password.EmailAsPassword:
                            @UserNameOrEmailAsPasswordError
                            break;

                        default:
                            @GenericPasswordResetError(MeState.Value.ChangePasswordErrors)
                            break;
                    }
                }

                break;
            }
        }
    }
</MudStack>

@* ReSharper disable InconsistentNaming *@
@* ReSharper disable UnusedParameter.Local *@

@code {

    private RenderFragment PasswordMismatchError => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            Your current password was incorrect.
        </MudAlert>
    };

    private RenderFragment PasswordTooShortError => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            Passwords must have a minimum of 8 characters.
        </MudAlert>
    };

    private RenderFragment UserNameOrEmailAsPasswordError => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            You cannot use your email address as your password.
        </MudAlert>
    };

    private readonly RenderFragment _pwnedPasswordError = __builder =>
    {
        <MudAlert Severity="Severity.Error">
            The password you've entered appears in multiple public data breaches and is therefore insecure. Please
            enter a different password. See <MudLink Href="https://haveibeenpwned.com/Passwords">this page</MudLink> for more information.
        </MudAlert>
    };

    private RenderFragment GenericPasswordResetError(string[] errors) => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            <p>
                Unable to change password:
            </p>
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </MudAlert>
    };

}

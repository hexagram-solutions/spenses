@using Spenses.App.Infrastructure
@using Spenses.Shared.Models.Identity
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<MudStack AlignItems="AlignItems.Start">

    <MudStack Row
              AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">
            Email
        </MudText>
        <MudTooltip Text="@(IsEditing ? "Change email" : "Cancel")">
            <MudIconButton Variant="Variant.Outlined"
                           Color="@(IsEditing ? Color.Warning : Color.Tertiary)"
                           OnClick="ToggleEditMode"
                           Icon="@(IsEditing ? Icons.Material.Rounded.EditOff : Icons.Material.Rounded.Edit)">
            </MudIconButton>
        </MudTooltip>
    </MudStack>
    <MudText>
        The email associated with your account. You use it to log in and receive emails from Spenses.
    </MudText>

    <EditForm Model="Request"
              OnSubmit="ChangeEmail">

        <MudStack>
            <MudTextField @bind-Value="Request.NewEmail"
                          @ref="EmailTextFieldRef"
                          Label="Email"
                          For="@(() => Request.NewEmail)"
                          Immediate
                          DebounceInterval="250"
                          Required
                          Style="width: 500px"
                          Disabled="!IsEditing"/>

            @if (IsEditing)
            {
                <div>
                    <LoadingButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Disabled="!ChangeEmailEnabled"
                                   Loading="MeState.Value.ChangeEmailRequesting">
                        Confirm new email
                    </LoadingButton>
                </div>
                @if (MeState.Value.ChangeEmailErrors.Length > 0)
                {
                    @foreach (var error in MeState.Value.ChangeEmailErrors)
                    {
                        switch (error)
                        {
                            case IdentityErrors.Register.InvalidEmail:
                            case IdentityErrors.Register.InvalidUserName:
                                @InvalidUserNameOrEmailError
                                break;

                            case IdentityErrors.Register.DuplicateEmail:
                            case IdentityErrors.Register.DuplicateUserName:
                                @DuplicateUserNameOrEmailError
                                break;

                            default:
                                @GenericError(MeState.Value.ChangeEmailErrors)
                                break;
                        }
                    }
                }

                @if (VerificationEmailSent)
                {
                    <MudAlert Severity="Severity.Success">
                        A verification email has been sent to <b>@Request.NewEmail</b>. Once you verify your new email, you can
                        use it to log in.
                    </MudAlert>
                }
            }
        </MudStack>
    </EditForm>
</MudStack>

@* ReSharper disable InconsistentNaming *@
@* ReSharper disable UnusedParameter.Local *@

@code
{
    private RenderFragment InvalidUserNameOrEmailError => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            The email address you entered is invalid.
        </MudAlert>
    };

    private RenderFragment DuplicateUserNameOrEmailError => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            It looks like you may already have an account with us under this email address. Use your credentials to
            <MudLink Href="@Routes.Identity.Login()">log in.</MudLink>
        </MudAlert>
    };

    private RenderFragment GenericError(string[] errors) => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            <p>
                Unable to change email:
            </p>
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </MudAlert>
    };
}

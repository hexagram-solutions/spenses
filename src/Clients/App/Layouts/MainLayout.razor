@using Spenses.App.Store.Homes
@using Spenses.Utilities.Security
@using Spenses.App.Components.Me
@using Spenses.App.Components.Identity
@using Spenses.App.Infrastructure
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@layout BaseLayout

<AuthorizeView Policy="@AuthorizationConstants.RequireVerifiedEmail">
    <Authorized>
        <MudLayout>
            <CascadingValue Value="CurrentHomeId">
                <MudAppBar Elevation="1">
                    <MudIconButton Icon="@Icons.Material.Rounded.Menu"
                                   Color="Color.Inherit"
                                   Edge="Edge.Start"
                                   OnClick="@(_ => DrawerToggle())"/>
                    <MudButton Href="@(CurrentHomeId.HasValue ? Routes.Homes.Dashboard(CurrentHomeId.Value) : Routes.Root)"
                               Variant="Variant.Text">
                        <MudText Typo="Typo.h5">
                            Spenses
                        </MudText>
                    </MudButton>
                    <MudSpacer/>
                    <LoginDisplay/>
                </MudAppBar>
                <MudDrawer @bind-Open="_drawerOpen"
                           ClipMode="DrawerClipMode.Always"
                           Elevation="2">
                    <NavMenu/>
                </MudDrawer>
                <MudMainContent Class="pt-4">
                    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </CascadingValue>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <RedirectToEmailVerification/>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter] private RouteData RouteData { get; set; } = null!;

    [Inject] private IDispatcher Dispatcher { get; set; } = null!;

    public Guid? CurrentHomeId => RouteData.RouteValues.TryGetValue("homeId", out var homeIdValue)
        ? Guid.Parse(homeIdValue!.ToString()!)
        : null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Dispatcher.Dispatch(new HomesRequestedAction());
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

}

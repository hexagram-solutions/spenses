@page "/reset-password"
@using Spenses.App.Infrastructure
@using Spenses.Shared.Models.Identity
@using Spenses.Shared.Validators.Identity
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Change your password</PageTitle>

<MudStack>
    <MudText Typo="Typo.h5">Change your password</MudText>

    @if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Code))
    {
        <MudAlert Severity="Severity.Error">
            Invalid password reset link.
        </MudAlert>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">Enter a new password for <b>@Email</b></MudText>

        <EditForm Model="Request"
                  OnSubmit="UpdatePassword">
            <Validate ValidationProperties="@(ValidationProperties.Set.FluentValidator<ResetPasswordRequestValidator>())"/>

            <MudStack>
                <MudTextField @bind-Value="Request.NewPassword"
                              InputType="InputType.Password"
                              Label="New password"
                              For="@(() => Request.NewPassword)"
                              Required />
            </MudStack>

            <div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           Disabled="IdentityState.Value.ResetPasswordRequesting">
                    Update password
                </MudButton>
            </div>

        </EditForm>

        @if (Succeeded == true)
        {
            <MudAlert Severity="Severity.Success">
                Your password was successfully updated. You will be redirected to the
                <MudLink Href="@Routes.Identity.Login()">
                    login page
                </MudLink>
                shortly.
            </MudAlert>
        }

        if (Succeeded == false)
        {
            @foreach (var error in IdentityState.Value.Errors)
            {
                switch (error)
                {
                    case IdentityErrors.Password.PasswordTooShort:
                        @PasswordTooShortError
                        break;

                    case IdentityErrors.Password.PwnedPassword:
                        @_pwnedPasswordError
                        break;

                    case IdentityErrors.Password.UserNameAsPassword:
                    case IdentityErrors.Password.EmailAsPassword:
                        @UserNameOrEmailAsPasswordError
                        break;

                    default:
                        @GenericPasswordResetError(IdentityState.Value.Errors)
                        break;
                }
            }
        }
    }
</MudStack>
@* ReSharper disable InconsistentNaming *@
@* ReSharper disable UnusedParameter.Local *@
@code
{
    private RenderFragment PasswordTooShortError => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            Passwords must have a minimum of 8 characters.
        </MudAlert>
    };

    private RenderFragment UserNameOrEmailAsPasswordError => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            You cannot use your email address as your password.
        </MudAlert>
    };

    private readonly RenderFragment _pwnedPasswordError = __builder =>
    {
        <MudAlert Severity="Severity.Error">
            <p>
                The password you've entered appears in multiple public data breaches and is therefore insecure. Please enter a different password.
            </p>
            <p>
                See <MudLink Href="https://haveibeenpwned.com/Passwords">this page</MudLink> for more information.
            </p>
        </MudAlert>
    };

    private RenderFragment GenericPasswordResetError(string[] errors) => __builder =>
    {
        <MudAlert Severity="Severity.Error">
            <p>
                Unable to reset password:
            </p>
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </MudAlert>
    };
}

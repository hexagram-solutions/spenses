@page "/settings"
@layout MainLayout
@using Spenses.App.Components.Me
@using Spenses.App.Store.Me
@using Spenses.Shared.Models.Me
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h4"
         GutterBottom="true">
    Settings
</MudText>

<MudStack>
    <MudPaper Class="pa-6">
        <Profile Properties="UserProfileProperties"/>
    </MudPaper>
    
    <MudPaper Class="pa-6">
        <Email Request="ChangeEmailRequest"/>
    </MudPaper>

    <MudPaper Class="pa-6">
        <MudStack>
            <MudText Typo="Typo.h5">
                Security
            </MudText>
            <ChangePassword />
            <MudDivider/>
            <TwoStepVerification />
            <MudDivider/>
            <RecoveryCodes />
        </MudStack>
    </MudPaper>
</MudStack>

@code
{
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;

    [Inject] private IState<MeState> MeState { get; set; } = null!;

    private CurrentUser? CurrentUser => MeState.Value.CurrentUser;

    private UserProfileProperties UserProfileProperties { get; set; } = new();

    private ChangeEmailRequest ChangeEmailRequest { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SubscribeToAction<CurrentUserReceivedAction>(action =>
        {
            UserProfileProperties = new UserProfileProperties { DisplayName = action.CurrentUser.DisplayName };
            ChangeEmailRequest = new ChangeEmailRequest { NewEmail = action.CurrentUser.Email };
        });

        if (CurrentUser is not null)
        {
            UserProfileProperties = new UserProfileProperties { DisplayName = CurrentUser!.DisplayName };
            ChangeEmailRequest = new ChangeEmailRequest { NewEmail = CurrentUser.Email };
        }
        else if (!MeState.Value.CurrentUserRequesting)
        {
            Dispatcher.Dispatch(new CurrentUserRequestedAction());
        }
    }
}

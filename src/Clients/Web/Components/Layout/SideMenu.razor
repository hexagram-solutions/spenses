@using Spenses.Client.Web.Features.Homes
@using Spenses.Client.Web.Infrastructure
@using Spenses.Application.Models.Homes
@using Spenses.Client.Web.Components.Homes
@inherits BlazorState.BlazorStateComponent

<Bar Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Tablet" ThemeContrast="ThemeContrast.Dark"
     Mode="BarMode.VerticalInline" CollapseMode="BarCollapseMode.Small">
    <BarToggler/>
    <BarBrand>
        <BarItem>
            <BarIcon IconName="_customIcon"/>
            Spenses
        </BarItem>
    </BarBrand>
    <BarMenu>
        <BarStart>
            <BarItem>
                @if (HomeState.HomesRequesting)
                {
                    <BarLabel>Loading...</BarLabel>
                }
                else
                {
                    @foreach (var home in HomeState.Homes!)
                    {
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="IconName.Home" IconSize="IconSize.Small" Margin="Margin.Is1.FromEnd"/>
                                @home.Name
                            </BarDropdownToggle>
                            @*TODO: bind-show to route*@
                            <BarDropdownMenu>
                                <BarDropdownItem To="@(Routes.Homes.Dashboard(home.Id))" Match="Match.All">
                                    <BarIcon IconName="IconName.Dashboard"/>
                                    Dashboard
                                </BarDropdownItem>
                                <BarDropdownItem To="@(Routes.Homes.Expenses(home.Id))" Match="Match.All">
                                    <BarIcon IconName="IconName.DollarSign"/>
                                    Expenses
                                </BarDropdownItem>
                                <BarDropdownItem To="@(Routes.Homes.Insights(home.Id))" Match="Match.All">
                                    <BarIcon IconName="IconName.Lightbulb"/>
                                    Insights
                                </BarDropdownItem>
                                <BarDropdownItem To="@(Routes.Homes.Settings(home.Id))" Match="Match.All">
                                    <BarIcon IconName="IconName.Wrench"/>
                                    Settings
                                </BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    }
                }
            </BarItem>
        </BarStart>
        <BarEnd>
            <BarItem Margin="Margin.Is2.OnAll">
                <Button Clicked="ShowCreateHomeModal" Color="Color.Primary" Block>
                    <Icon Name="IconName.PlusCircle"/>
                    New home
                </Button>
            </BarItem>
        </BarEnd>
    </BarMenu>
</Bar>

@code
{
    [Inject]
    public IModalService? ModalService { get; set; }

    HomeState HomeState => GetState<HomeState>();

    private Home? CurrentHome => HomeState.CurrentHome;

    protected override Task OnParametersSetAsync()
    {
        return Mediator.Send(new HomeState.HomesRequested());
    }

    private Task ShowCreateHomeModal()
    {
        return ModalService!.Show<CreateHomeModal>();
    }

    RenderFragment _customIcon = @<img src="/brand-logo.png" style="width:32px; height: 32px"/>;
}
